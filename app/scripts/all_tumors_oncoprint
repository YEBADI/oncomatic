### HISTORY ####################################################################
# Version   Date          Coder               Comments
# 1.0       31/03/2017    Yusef               
### DESCRIPTION ################################################################
#  R pipeline to download TCGAbiolinks data for tumor type
#  and produce an oncoprint for top mutated genes. User can specify certain
#  genes if they wish.
### PARAMETERS #################################################################
# 
### FUNCTIONS ##################################################################

################################ USER INPUT ####################################
#
# 1. Tumor type, in capital letters; either "BRCA" or "PAAD".
# 2. The pipeline of choice; "mutect2", "varscan2", "muse", or "somaticsniper".
# 3. The number of genes to show
# 4. State if you wish to show only genes of interest
# 5. Specify the actual  genes of interest, in capital letters and separated by 
# " - " with NO SPACE (e.g. " ATM-BRCA1-CHEK2 "): ')
#
########################## PARAMETER INPUT #####################################
cat("-- reading arguments\n", sep = "");
cmd_args = commandArgs(trailingOnly=TRUE);
for (arg in cmd_args) cat("  ", arg, "\n", sep="");

args1 <- cmd_args[1] # "BRCA" or "PAAD"

# Pipeline_options are "muse", "varscan2", "somaticsniper", or "mutect2".
args2 <- cmd_args[2] # "mutect2"

# number of genes to show
args3 <- cmd_args[3] # 20 # top number of genes to display (e.g. 20)

args4 <- cmd_args[4] #yes #no #do you want to select genes?
# yes or no

#this one is optional
args5 <- cmd_args[5] # "ATM-P53-BRCA1-BRCA2-PTEN-CHEK2-PALB2-STK11-BARD1-BRIP1-CASP8-CDH1-CHEK2"

ProjectID <- paste("TCGA-", args1, sep="")
# Define tumor type according to TCGA format e.g. BRCA (breast), PAAD (Pancreas)
tumor.type <-  args1

################################### MAIN #######################################
#===============================================================================
#    Preparation of environment
#===============================================================================
# Identify and install missing libraries.
TCGA.libs <- c("TCGAbiolinks","SummarizedExperiment");
new.libs <- TCGA.libs[!(TCGA.libs %in% installed.packages() [,"Package"])]
if(length(new.libs)) {
  source("https://bioconductor.org/biocLite.R")
  biocLite(new.libs)
}

# loads in the libraries to R
library("TCGAbiolinks")
library("SummarizedExperiment")
library("R.utils")

#############################  MAIN  ###########################################

#===============================================================================
#    Data query and download clincal data
#    Note: tumor can be softcoded as param input from command line.
#    Note: can develop program and let user pick clin.data terms.
#===============================================================================
# Biolinks command to download the general clinical data for all patient samples

clin.data <- GDCquery_clinic(ProjectID, "clinical" );  

# Check dimensions
dim(clin.data)

# Subsetting the clinical data to covariates of interest to new data matrix
clin.covariates.for.oncodata <- c("race", "gender", "vital_status", 
                                          "tumor_stage", "bcr_patient_barcode");
clin.forvisual <- clin.data[ , clin.covariates.for.oncodata]

# Check dimensions of slimmed data matrix
dim(clin.forvisual) #1097 5

#===============================================================================
#    Access and download the mutation data for tumor type and
#    generate an oncoprint for each pipeline
#    Note: As mentioned before, should be softcoded to let user decide cancer
#    type as well as pick pipeline option (passed in as parameter).
#===============================================================================
# Download mutations data & visualise clinical & mutations data in an oncoprint
# Oncoprint of user requested genes


if(args4 == "yes"){
# User wants to look at specific genes he has requested in args5
  user.gene.request <- args5
  user.gene.list <- unlist(strsplit(user.gene.request,"-"))
  mut.data.file.name.gz <- paste("mut_data_",tumor.type, "_",args2,".csv.gz", sep="")
  mut.data.file.name <- paste("mut_data_",tumor.type, "_",args2,".csv", sep="")
  
  data.file.dir.gz <- paste("app/static/data/", mut.data.file.name.gz, sep="")
  gunzip(data.file.dir.gz)
  data.file.dir <- paste("app/static/data/", mut.data.file.name, sep="")
  mut.data <- read.csv(data.file.dir)  

  all.mut <- matrix(data=0, nrow=length(user.gene.list), ncol=1, 
          dimnames=list(rownames=user.gene.list, colnames="number_of_reports"));
  all.positions <- NULL
  for(gene in user.gene.list) {
    gene.position <- which(mut.data$Hugo_Symbol %in% gene)
    all.mut[gene, "number_of_reports"] <- length(gene.position)
    all.positions <- c(all.positions, gene.position)
  }
  all.mut.ordered <- all.mut[ order(all.mut[, 
                                      "number_of_reports"], decreasing=TRUE),];
  user.choice.gene.names <- names( all.mut.ordered[ 1:args3 ] );
  user.choice.mut.data <- mut.data[ all.positions, ];
  TCGAvisualize_oncoprint(
      mut = user.choice.mut.data,
      genes = user.choice.gene.names,
      filename = paste("app/static/results/oncoprint.pdf", sep=""),
      annotation = clin.forvisual,
      color=c("background"="#CCCCCC","DEL"="purple",
                    "INS"="yellow","SNP"="brown"),
      rows.font.size= 8,
      width = 5,
      heatmap.legend.side = "right",
      dist.col = 0,
      label.font.size = 6
      );
  mut.data.file.name.new <- paste("mut_data_",tumor.type, "_",args2,".csv", sep="")
  data.file.dir.new <- paste("app/static/data/", mut.data.file.name.new, sep="")
  gzip(data.file.dir.new)
}else{
# User does not want to select genes, just look at top X number of genes.
  mut.data.file.name.gz <- paste("app/static/data/mut_data_",tumor.type, "_",args2,".csv.gz", sep="")
  mut.data.file.name <- paste("app/static/data/mut_data_",tumor.type, "_",args2,".csv", sep="")
  
  gunzip(mut.data.file.name.gz)
  mut.data <- read.csv(mut.data.file.name) 
  
  genes.names <- unique(mut.data$Hugo_Symbol);
  all.mut <- matrix(data=0, nrow=length(genes.names), ncol=1, 
            dimnames=list(rownames=genes.names, colnames="number_of_reports"));
  # Identify position of each gene and populate the matrix
  all.positions <- NULL;
  for(gene in genes.names) {
    gene.position <- which(mut.data$Hugo_Symbol == gene);
    all.mut[gene, "number_of_reports"] <- length(gene.position);
    all.positions <- c(all.positions, gene.position );
  }
  # Order the whole all.mut matrix by the most reported gene highest to lowest.
  all.mut.ordered <- all.mut[ order(all.mut[, "number_of_reports"], 
                                    decreasing=TRUE),];
  # Isolate top 20 gene names.
  top.mut.genes <- names( all.mut.ordered[ 1:args3 ] );
  # Subset mutation data
  top.mut.data <- mut.data[ all.positions, ];
  # Oncoprint of top 20 genes.
  TCGAvisualize_oncoprint(
      mut = top.mut.data,
      genes = top.mut.genes,
      filename = paste("app/static/results/oncoprint.pdf", sep=""),
      annotation = clin.forvisual,
      color=c( "background"="#CCCCCC","DEL"="purple",
              "INS"="yellow","SNP"="brown"),
      rows.font.size= 8,
      width = 5,
      heatmap.legend.side = "right",
      dist.col = 0,
      label.font.size = 6
    );
  mut.data.file.name.new <- paste("mut_data_",tumor.type, "_",args2,".csv", sep="")
  data.file.dir.new <- paste("app/static/data/", mut.data.file.name.new, sep="")
  gzip(data.file.dir.new)
}

dev.off();
