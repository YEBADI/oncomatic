################################################################################
#                                                                              #
#     Welcome to oncomatic_oncoprint!                                          #
#                                                                              #
#      This is a funtction which directly                                      #
#             replaces the TCGABiolinks own oncoprint function                 #
#                                   'TCGAvisualize_oncoprint()'.               #
#                                                                              #
#       oncomatic_oncoprint takes the exact same input,                        #
#           yet produces a much more useful interactive output.                #
#                                                                              #
#       By Yusef E. Badi, as part of an MSc Bioinformatics Project at          #
#               Queen Mary University of London, Barts Cancer Institute.       #
#                                                                              #
#  Acknowledgments:                                                            #
#     PROF. CLAUDE CHELALA, DR. EMANUELA GADALETA, DR. STEFANO PIRRO           #
#     oncomatic_oncoprint was made using iHeatMapr and TCGAvisualize_oncoprint #
#     source code.                                                             #
#                                                                              #
# The oncomatic_oncoprint function defined, this can be called in other R      #
# scripts with source("<correct directory>/oncomatic_oncoprint_script").       #
################################################################################
# Requirements:
# iheatmapr

# install iheatmapr
# devtools::install_github("AliciaSchep/iheatmapr")
# loads in the library to R
# library("iheatmapr")

# These are the inputs required: 
#   These are identical to the input taken by 
#     the TCGAvisualize_oncoprint() function.

# mut <- top.mut.data
# genes <- top.mut.genes
# annotation <- joined.clin.data.banded

################################################################################

oncomatic_oncoprint <- function (mut,
                                 genes,
                                 annotation
                                 ){
  # The first step is preparing the data table from mut file input 
  
  ##############################################################################
  # This part primarily based off of the TCGAvisualize_oncoprint() source code #
  ##############################################################################

  mut <- setDT(mut)
  str(mut)
  mut$value <- 1
  all.samples <- unique(mut$Tumor_Sample_Barcode)

  formula <- paste0("Tumor_Sample_Barcode + Hugo_Symbol ~ Variant_Type")
  suppressMessages({mat <- dcast(mut, as.formula(formula),value.var = "value",fill = 0,drop = FALSE)})

  columns <- colnames(mat)[-c(1:2)]

  mat$value <- ""
  mat <- setDT(mat)
  for ( i in columns){
      mat[,i] <-  replace(mat[,i,with = FALSE],mat[,i,with = FALSE]>0,paste0(i,";"))
      mat[,i] <-  replace(mat[,i,with = FALSE],mat[,i,with = FALSE]==0,"")
      mat[,value:=paste0(value,get(i))]
  }
  str(mat)

  mutation.type <- c()
  for (i in columns){
      if(length(grep(i,mat$value)) > 0) mutation.type <- c(mutation.type,i)
  }

  mat <- setDF(dcast(mat, Tumor_Sample_Barcode~Hugo_Symbol, value.var="value",fill=""))
      rownames(mat) <- mat[,1]
      mat <- mat[,-1]

 
  aux <- data.frame(row.names = all.samples[!all.samples %in% rownames(mat)])
  if(nrow(aux) > 0) {
      aux[,colnames(mat)] <- ""
      mat <- rbind(mat,aux)
  }
      

  mat <- t(mat)

  idx <- match(substr(colnames(mat),1,12),annotation$bcr_patient_barcode)
  annotation <- annotation[idx,]
  annotation$bcr_patient_barcode <- NULL

  # Now we have created a dataframe with the samples and mutations

  ##############################################################################
  #   Here onwards is my own code, using iHeatMapr R package code too          #
  ##############################################################################

  # In this part I am taking the clinical annotation dataframe and joining it
  # to the mutations dataframe to make a matrix with both sets of data
  # mutation and clinical for each patient sample

  column.names <- c("race","gender","vital_status","tumor_stage")

  annotation <- annotation[column.names]

  annotation <- t(annotation)

  annotation <- as.data.frame(annotation)

  mat <- as.data.frame(mat)

  mat.colnams <- colnames(mat)

  colnames(annotation) <- mat.colnams

  temp.matrix <- rbind(mat, annotation)
  temp.matrix <- as.matrix(temp.matrix)

  # Now here I am turning the string mutation data into a numbered matrix
  # These steps turn the MAF mutaton string values into numbers
  # so INS; becomes '2' and so on
  # The below steps must be in this exact order
  # otherwise all instances of INS; including
  # INS; in INS; SNP; will be changed resulting in '21' instead of '4'
  step.1 <- gsub("INS;DEL;SNP;", "6", temp.matrix)

  step.2 <- gsub("INS;SNP;", "4", step.1)

  step.3 <- gsub("DEL;SNP;", "5", step.2)

  step.4 <- gsub("SNP;", "1", step.3)


  step.5 <- gsub("INS;", "2", step.4)


  step.6 <- gsub("DEL;", "3", step.5)

  step.6[step.6 == ""] <- 0

  step.6

  tumor.matrix.df <- as.data.frame(step.6)

# Now here I am taking the clinical data string values and adding them to 
# each individual patient sample name as additional strings
# then removing the actual clinical annotation rows
# this creates a matrix with sample names annotated with clinical information
# and a numerical mutations matrix

  newnames <- NULL
  for(i in names(tumor.matrix.df)){
    part.1 <- tumor.matrix.df[[paste(i)]]
    part.2 <- levels(part.1)
    part.3 <- paste(toString(part.2), sep="")
    part.4 <- c(i,part.3)
    part.5 <- toString(part.4)
    newnames <- c(newnames,part.5)
  }

  colnames(tumor.matrix.df) <- newnames

  tumor.matrix.df

  # rmeove the redundant clinical information rows 
  remove.these <- c("race","gender","vital_status","tumor_stage")
  tumor.matrix <- tumor.matrix.df[!rownames(tumor.matrix.df) %in% remove.these,]

  tumor.matrix[] <- lapply(tumor.matrix, function(x) as.numeric(as.character(x)))

  # Now we have created a usable matrix of samples and mutations as respective numbers
  tumor.matrix <- as.matrix(tumor.matrix)
  str(tumor.matrix) 

col.number <- ncol(tumor.matrix)


# now I am ordering the matrix from highest mutations to lowest according to the
# top genes names input taken at the start
top.genes.list <- rev(top.mut.genes)
tumor.matrix <- tumor.matrix[top.genes.list, ]

# Now the Tumor matrix is ready for plotting

  ##############################################################################
  #   Here onwards I am creating the clinical heatmaps using the sample names  #
  #    to which we added the clinical annotations to.                          #
  ##############################################################################

  # Here we are creating the values for the clinical heatmaps
  
  #race
  white.pos <- grep('white', colnames(tumor.matrix))
  white.patients <- colnames(tumor.matrix)[white.pos]

  black.pos <- grep('black', colnames(tumor.matrix))
  black.patients <- colnames(tumor.matrix)[black.pos]

  asian.pos <- grep('asian', colnames(tumor.matrix))
  asian.patients <- colnames(tumor.matrix)[asian.pos]


  #gender
  female.pos <- grep('female', colnames(tumor.matrix))
  female.patients <- colnames(tumor.matrix)[female.pos]

  male.pos <- grep(' male', colnames(tumor.matrix))
  male.patients <- colnames(tumor.matrix)[male.pos]


  #status
  alive.pos <- grep('alive', colnames(tumor.matrix))
  alive.patients <- colnames(tumor.matrix)[alive.pos]

  dead.pos <- grep('dead', colnames(tumor.matrix))
  dead.patients <- colnames(tumor.matrix)[dead.pos]


  ## cancer stage 
  si.pos <- grep(' stage i,', colnames(tumor.matrix))
  si.patients <- colnames(tumor.matrix)[si.pos]

  sii.pos <- grep(' stage ii,', colnames(tumor.matrix))
  sii.patients <- colnames(tumor.matrix)[sii.pos]

  siii.pos <- grep(' stage iii,', colnames(tumor.matrix))
  siii.patients <- colnames(tumor.matrix)[siii.pos]

  siv.pos <- grep(' stage iv,', colnames(tumor.matrix))
  siv.patients <- colnames(tumor.matrix)[siv.pos]


  # Here we are creating the barplots for the numbers of patients and mutated 
  # genes respectively
  
  # number of mutated patient samples per gene
  barplot1 = as.numeric();
  for (i in 1:nrow(tumor.matrix)) {
    barplot1[i] <- sum(tumor.matrix[i,] > 0)
  }
  print(barplot1);

  # number of mutated genes per patient sample
  barplot2 = as.numeric();
  for (i in 1:ncol(tumor.matrix)) {
    barplot2[i] <- sum(tumor.matrix[,i] > 0)
  }
  print(barplot2);



  ##############################################################################
  #   Now we create the plot using the input mutations matrix and the heatmaps #
  ##############################################################################
  
  main_heatmap(tumor.matrix, name = "Mutations<br>Profile", x_categorical = TRUE,
                colors= c("white", "red", "blue", "green")) %>%
  add_col_groups(
    ifelse(colnames(tumor.matrix) %in% white.patients,
          "White", 
          ifelse(colnames(tumor.matrix) %in% black.patients,
                 "Black", 
                 ifelse(colnames(tumor.matrix) %in% asian.patients,
                        "Asian",
                        "Not Reported"))),
                    side = "bottom", name = "Sample<br>Race",
                    title = "Race",
                    colors = c('#ea4335','#fbbc05','grey','#4285f4')) %>%
  add_col_groups(
    ifelse(colnames(tumor.matrix) %in% female.patients,
          "female",  
          ifelse(colnames(tumor.matrix) %in% male.patients,
          "male",  
                        "Not Reported")),
                    side = "bottom", name = "Sample<br>Gender",
                    title = "Gender",
                    colors = c("pink", "grey", "blue")) %>%
  add_col_groups(
    ifelse(colnames(tumor.matrix) %in% alive.patients,
          "Alive",  
          ifelse(colnames(tumor.matrix) %in% dead.patients,
                        "Dead", 
                        "Not Reported")),
                    side = "bottom", name = "Sample<br>Status",
                    title = "Status",
                    colors = c("green","black", "grey")) %>%
  add_col_groups(
    ifelse(colnames(tumor.matrix) %in% si.patients,
          "Stage i",  
          ifelse(colnames(tumor.matrix) %in% sii.patients,
                        "Stage ii",
            ifelse(colnames(tumor.matrix) %in% siii.patients,
                        "Stage iii",
                  ifelse(colnames(tumor.matrix) %in% siv.patients,
                        "Stage iv",
                        "Not Reported")))),
                    side = "bottom", name = "Sample<br>Cancer<br>Stage",
                    title = "Status", 
                    colors = c("grey","#0084ff","#94ce08","#f5dc00", "orange")) %>%
    add_col_labels(ticktext = colnames(tumor.matrix), font = list(size = 8)) %>%
    add_row_labels(size = 0.3,font = list(size = 20), side="left") %>%               
    add_col_title("TCGA Clinical Patient Samples", side= "top", font = list(size = 15)) %>%
    add_row_barplot(x = barplot1, color="maroon",
                    tracename = "No. of patient samples presenting mutation in this gene", 
                    layout = list(title = "No. of <br>Samples<br>Presenting <br>Mutated Gene")) %>%
    add_col_barplot(y = barplot2, color="#F4A460",
                  tracename = "No. of genes mutated for this patient sample", 
                  layout = list(title = "Number of <br>Mutated Genes<br>Per Sample"))
}
