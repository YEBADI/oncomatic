### HISTORY ####################################################################
# Version   Date          Coder               Comments
# 1.0       21/04/2017    Yusef               
### DESCRIPTION ################################################################
#  R pipeline to download TCGAbiolinks data for tumor type
#  and produce an oncoprint for top mutated genes stratified for blood and 
# tissue normals and also intersecting between blood and tissue normals.
# User can specify certain  genes if they wish.
### PARAMETERS #################################################################
# 
### FUNCTIONS ##################################################################

################################ USER INPUT ####################################
#
# 1. Tumor type, in capital letters; either "BRCA" or "PAAD".
# 2. The pipeline of choice; "mutect2", "varscan2", "muse", or "somaticsniper".
# 3. The number of genes to show
# 4. State if you wish to show only genes of interest
# 5. Specify the actual  genes of interest, in capital letters and separated by 
# " - " with NO SPACE (e.g. " ATM-BRCA1-CHEK2 "): ')
#
########################## PARAMETER INPUT #####################################
cat("-- reading arguments\n", sep = "");
cmd_args = commandArgs(trailingOnly=TRUE);
for (arg in cmd_args) cat("  ", arg, "\n", sep="");

args1 <- cmd_args[1] # "BRCA" or "PAAD"

# Pipeline_options are "muse", "varscan2", "somaticsniper", or "mutect2".
args2 <- cmd_args[2] # "mutect2"

# number of genes to show
args3 <- cmd_args[3] # 20 # top number of genes to display (e.g. 20)

args4 <- cmd_args[4] #yes #no #do you want to select genes?
# yes or no

#this one is optional
args5 <- cmd_args[5] # "ATM-P53-BRCA1-BRCA2-PTEN-CHEK2-PALB2-STK11-BARD1-BRIP1-CASP8-CDH1-CHEK2"

ProjectID <- paste("TCGA-", args1, sep="")
# Define tumor type according to TCGA format e.g. BRCA (breast), PAAD (Pancreas)
tumor.type <-  args1

################################### MAIN #######################################
#===============================================================================
#    Preparation of environment
#===============================================================================
# Identify and install missing libraries.
TCGA.libs <- c("TCGAbiolinks","SummarizedExperiment");
new.libs <- TCGA.libs[!(TCGA.libs %in% installed.packages() [,"Package"])]
if(length(new.libs)) {
  source("https://bioconductor.org/biocLite.R")
  biocLite(new.libs)
}

# loads in the libraries to R
library("TCGAbiolinks")
library("SummarizedExperiment")
#############################  MAIN  ###########################################
#===============================================================================
#    Preparation of environment
#===============================================================================
# Define variables.
ProjectDir <- paste("app/static/results");

# create mutations directory and go into it
if (file.exists(ProjectDir)){
  cat( paste("\nFolder with project [", ProjectDir, "] already exists. 
         The requested data will be stored in [", ProjectDir, "]\n", sep=" ") );
} else {
  dir.create(ProjectDir);
}
setwd(ProjectDir);

#===============================================================================
#    Data query and download clincal data
#    Note: tumor can be softcoded as param input from command line.
#    Note: can develop program and let user pick clin.data terms.
#===============================================================================
# Biolinks command to download the general clinical data for all patient samples
clin.data <- GDCquery_clinic( ProjectID, "clinical" );
# Check dimensions
dim(clin.data)

# Subsetting the clinical data to covariates of interest to new data matrix
clin.covariates.for.oncodata <- c("race", "gender", "vital_status", 
                                          "tumor_stage", "bcr_patient_barcode");
clin.forvisual <- clin.data[ , clin.covariates.for.oncodata]

# Check dimensions of slimmed data matrix
dim(clin.forvisual) #1097 5

#===============================================================================
#    Access and download the mutation data for tumor type and
#    generate an oncoprint for each pipeline
#    Note: As mentioned before, should be softcoded to let user decide cancer
#    type as well as pick pipeline option (passed in as parameter).
#===============================================================================
# Download mutations data & visualise clinical & mutations data in an oncoprint
# Oncoprint of user requested genes


mut.data <- GDCquery_Maf(tumor = tumor.type, pipelines = args2, 
                         save.csv = TRUE);


tumor.barcodes <- NULL;
for( i in 1:length(mut.data$Tumor_Sample_Barcode) ){
      tmp.bar.split <- unlist(strsplit(mut.data$Tumor_Sample_Barcode[i], 
                                       split="-", fixed=TRUE));
      tmp.bar.join <- paste(tmp.bar.split[1], "-", tmp.bar.split[2], "-", 
                            tmp.bar.split[3], sep = "")
      tumor.barcodes <- rbind(tumor.barcodes, tmp.bar.join)
    }


query.barcodes <- NULL;
blood.barcodes <- NULL;
tissue.barcodes <- NULL;

for( i in 1:length(mut.data$Matched_Norm_Sample_Barcode) ){
      tmp.bar.split <- unlist(strsplit(mut.data$Matched_Norm_Sample_Barcode[i], 
                                       split="-", fixed=TRUE));
      tmp.bar.join <- paste(tmp.bar.split[1], "-", tmp.bar.split[2], "-", 
                            tmp.bar.split[3], "-", tmp.bar.split[4], "-", tmp.bar.split[5], "-", tmp.bar.split[6], "-", tmp.bar.split[7], sep = "")
      for(type in tmp.bar.split[4]) {
        if ("10A" %in% type) {
          tissue.barcodes <- rbind(tissue.barcodes, tmp.bar.join)
        }
        if ("11A" %in% type)  {
          blood.barcodes <- rbind(blood.barcodes, tmp.bar.join)        
        }
    }
}

mut.data.blood <- mut.data[which(mut.data$Matched_Norm_Sample_Barcode %in% blood.barcodes),]
mut.data.blood.names <- mut.data.blood$Hugo_Symbol

mut.data.tissue <- mut.data[which(mut.data$Matched_Norm_Sample_Barcode %in% tissue.barcodes),]
mut.data.tissue.names <- mut.data.tissue$Hugo_Symbol

mut.data.intersected.names <- intersect(mut.data.blood$Hugo_Symbol, mut.data.tissue$Hugo_Symbol)


if(args4 == "no") {
  ################## BLOOD ONLY NORMALS DATA #####################################
  all.genes.names <- unique(mut.data$Hugo_Symbol);
  blood.mut <- matrix(data=0, nrow=length(all.genes.names), ncol=1, 
            dimnames=list(rownames=all.genes.names, colnames="number_of_reports"));
  # Identify position of each gene and populate the matrix

  all.positions <- NULL;
  for(gene in all.genes.names) {
    gene.position <- which(mut.data.blood.names == gene);
    blood.mut[gene, "number_of_reports"] <- length(gene.position);
    all.positions <- c(all.positions, gene.position );
  }

  # Order the whole blood.mut matrix by the most reported gene highest to lowest.
  blood.mut.ordered <- blood.mut[ order(blood.mut[, "number_of_reports"], 
                                    decreasing=TRUE),];
  # Isolate top 20 gene names.
  top.blood.mut.genes <- names( blood.mut.ordered[ 1:args3 ] );
  # Subset mutation data
  top.blood.mut.data <- mut.data[ all.positions, ];
  # Oncoprint of top 20 genes.
  TCGAvisualize_oncoprint(
      mut = top.blood.mut.data,
      genes = top.blood.mut.genes,
      filename = paste("oncoprint_blood.pdf", sep=""),
      annotation = clin.forvisual,
      color=c( "background"="#CCCCCC","DEL"="purple",
              "INS"="yellow","SNP"="brown"),
      rows.font.size= 8,
      width = 5,
      heatmap.legend.side = "right",
      dist.col = 0,
      label.font.size = 6
    );

  ################## TISSUE ONLY NORMALS DATA ####################################
  all.genes.names <- unique(mut.data$Hugo_Symbol);
  tissue.mut <- matrix(data=0, nrow=length(all.genes.names), ncol=1, 
            dimnames=list(rownames=all.genes.names, colnames="number_of_reports"));
  # Identify position of each gene and populate the matrix

  all.positions <- NULL;
  for(gene in all.genes.names) {
    gene.position <- which(mut.data.tissue.names == gene);
    tissue.mut[gene, "number_of_reports"] <- length(gene.position);
    all.positions <- c(all.positions, gene.position );
  }

  # Order the whole tissue.mut matrix by the most reported gene highest to lowest.
  tissue.mut.ordered <- tissue.mut[ order(tissue.mut[, "number_of_reports"], 
                                    decreasing=TRUE),];
  # Isolate top 20 gene names.
  top.tissue.mut.genes <- names( tissue.mut.ordered[ 1:args3 ] );
  # Subset mutation data
  top.tissue.mut.data <- mut.data[ all.positions, ];
  # Oncoprint of top 20 genes.
  TCGAvisualize_oncoprint(
      mut = top.tissue.mut.data,
      genes = top.tissue.mut.genes,
      filename = paste("oncoprint_tissue.pdf", sep=""),
      annotation = clin.forvisual,
      color=c( "background"="#CCCCCC","DEL"="purple",
              "INS"="yellow","SNP"="brown"),
      rows.font.size= 8,
      width = 5,
      heatmap.legend.side = "right",
      dist.col = 0,
      label.font.size = 6
    );

  ################## INTERSECTED BLOOD TISSUE NORMALS DATA #######################
  all.genes.names <- unique(mut.data$Hugo_Symbol);
  intersected.mut <- matrix(data=0, nrow=length(all.genes.names), ncol=1, 
            dimnames=list(rownames=all.genes.names, colnames="number_of_reports"));
  # Identify position of each gene and populate the matrix

  all.positions <- NULL;
  for(gene in all.genes.names) {
    gene.position <- which(mut.data.intersected.names == gene);
    intersected.mut[gene, "number_of_reports"] <- length(gene.position);
    all.positions <- c(all.positions, gene.position );
  }

  # Order the whole intersected.mut matrix by the most reported gene highest to lowest.
  intersected.mut.ordered <- intersected.mut[ order(intersected.mut[, "number_of_reports"], 
                                    decreasing=TRUE),];
  # Isolate top 20 gene names.
  top.intersected.mut.genes <- names( intersected.mut.ordered[ 1:args3 ] );
  # Subset mutation data
  top.intersected.mut.data <- mut.data[ all.positions, ];
  # Oncoprint of top 20 genes.
  TCGAvisualize_oncoprint(
      mut = top.intersected.mut.data,
      genes = top.intersected.mut.genes,
      filename = paste("oncoprint_intersected.pdf", sep=""),
      annotation = clin.forvisual,
      color=c( "background"="#CCCCCC","DEL"="purple",
              "INS"="yellow","SNP"="brown"),
      rows.font.size= 8,
      width = 5,
      heatmap.legend.side = "right",
      dist.col = 0,
      label.font.size = 6
    );
} else {
  user.gene.request <- args5
  user.gene.list <- unlist(strsplit(user.gene.request,"-"))

  ################## BLOOD ONLY NORMALS DATA #####################################
  blood.mut <- matrix(data=0, nrow=length(user.gene.list), ncol=1, 
            dimnames=list(rownames=user.gene.list, colnames="number_of_reports"));
  # Identify position of each gene and populate the matrix

  all.positions <- NULL;
  for(gene in user.gene.list) {
    gene.position <- which(mut.data.blood.names == gene);
    blood.mut[gene, "number_of_reports"] <- length(gene.position);
    all.positions <- c(all.positions, gene.position );
  }

  # Order the whole blood.mut matrix by the most reported gene highest to lowest.
  blood.mut.ordered <- blood.mut[ order(blood.mut[, "number_of_reports"], 
                                    decreasing=TRUE),];
  # Isolate top 20 gene names.
  top.blood.mut.genes <- names( blood.mut.ordered[ 1:args3 ] );
  # Subset mutation data
  top.blood.mut.data <- mut.data[ all.positions, ];
  # Oncoprint of top 20 genes.
  TCGAvisualize_oncoprint(
      mut = top.blood.mut.data,
      genes = top.blood.mut.genes,
      filename = paste("oncoprint_blood.pdf", sep=""),
      annotation = clin.forvisual,
      color=c( "background"="#CCCCCC","DEL"="purple",
              "INS"="yellow","SNP"="brown"),
      rows.font.size= 8,
      width = 5,
      heatmap.legend.side = "right",
      dist.col = 0,
      label.font.size = 6
    );


  ################## TISSUE ONLY NORMALS DATA ####################################
  tissue.mut <- matrix(data=0, nrow=length(user.gene.list), ncol=1, 
            dimnames=list(rownames=user.gene.list, colnames="number_of_reports"));
  # Identify position of each gene and populate the matrix

  all.positions <- NULL;
  for(gene in user.gene.list) {
    gene.position <- which(mut.data.tissue.names == gene);
    tissue.mut[gene, "number_of_reports"] <- length(gene.position);
    all.positions <- c(all.positions, gene.position );
  }

  # Order the whole tissue.mut matrix by the most reported gene highest to lowest.
  tissue.mut.ordered <- tissue.mut[ order(tissue.mut[, "number_of_reports"], 
                                    decreasing=TRUE),];
  # Isolate top 20 gene names.
  top.tissue.mut.genes <- names( tissue.mut.ordered[ 1:args3 ] );
  # Subset mutation data
  top.tissue.mut.data <- mut.data[ all.positions, ];
  # Oncoprint of top 20 genes.
  TCGAvisualize_oncoprint(
      mut = top.tissue.mut.data,
      genes = top.tissue.mut.genes,
      filename = paste("oncoprint_tissue.pdf", sep=""),
      annotation = clin.forvisual,
      color=c( "background"="#CCCCCC","DEL"="purple",
              "INS"="yellow","SNP"="brown"),
      rows.font.size= 8,
      width = 5,
      heatmap.legend.side = "right",
      dist.col = 0,
      label.font.size = 6
    );

  ################## INTERSECTED BLOOD TISSUE NORMALS DATA #######################
  intersected.mut <- matrix(data=0, nrow=length(user.gene.list), ncol=1, 
            dimnames=list(rownames=user.gene.list, colnames="number_of_reports"));
  # Identify position of each gene and populate the matrix

  all.positions <- NULL;
  for(gene in user.gene.list) {
    gene.position <- which(mut.data.intersected.names == gene);
    intersected.mut[gene, "number_of_reports"] <- length(gene.position);
    all.positions <- c(all.positions, gene.position );
  }

  # Order the whole intersected.mut matrix by the most reported gene highest to lowest.
  intersected.mut.ordered <- intersected.mut[ order(intersected.mut[, "number_of_reports"], 
                                    decreasing=TRUE),];
  # Isolate top 20 gene names.
  top.intersected.mut.genes <- names( intersected.mut.ordered[ 1:args3 ] );
  # Subset mutation data
  top.intersected.mut.data <- mut.data[ all.positions, ];
  # Oncoprint of top 20 genes.
  TCGAvisualize_oncoprint(
      mut = top.intersected.mut.data,
      genes = top.intersected.mut.genes,
      filename = paste("oncoprint_intersected.pdf", sep=""),
      annotation = clin.forvisual,
      color=c( "background"="#CCCCCC","DEL"="purple",
              "INS"="yellow","SNP"="brown"),
      rows.font.size= 8,
      width = 5,
      heatmap.legend.side = "right",
      dist.col = 0,
      label.font.size = 6
    );
}

dev.off();
}