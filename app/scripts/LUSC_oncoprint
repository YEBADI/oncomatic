### HISTORY ####################################################################
# Version   Date          Coder               Comments
# 1.0       11/04/2017    Yusef
### DESCRIPTION ################################################################
#  Specific script only runs on LUSC data as stratifies data by smoking status;
#  downloads TCGAbiolinks data for LUSC tumor type and produce an oncoprint for 
#  the top most mutated genes for each LUSC smoking status subtype.

################################# PARAMETERS ###################################

################# subsetting clinical data #####################################

smoking_LUSC <- read.csv("app/scripts/smoking_LUSC.csv")
# remove incomplete cases (cases with NA)
smoke.complete.cases <- smoking_LUSC[complete.cases(smoking_LUSC["subtype_Smoking.Status"]),]
#subset according to smoking status
reformed.morethan15.smokers <- smoke.complete.cases[which(smoke.complete.cases$subtype_Smoking.Status == "reformed>15yrs"),1]
reformed.lessthan15.smokers <- smoke.complete.cases[which(smoke.complete.cases$subtype_Smoking.Status == "reformed<=15yrs"),1]
never.smokers <- smoke.complete.cases[which(smoke.complete.cases$subtype_Smoking.Status == "NeverSmoked"),1]
smokers <- smoke.complete.cases[which(smoke.complete.cases$subtype_Smoking.Status == "Smokes"),1]

################################################################################


cat("-- reading arguments\n", sep = "");
cmd_args = commandArgs(trailingOnly=TRUE);
for (arg in cmd_args) cat("  ", arg, "\n", sep="");

args1 <- cmd_args[1] # "show subtypes 'yes' or 'no'?""

# Pipeline_options are "muse", "varscan2", "somaticsniper", or "mutect2".
args2 <- cmd_args[2] # "mutect2"

# number of genes to show
args3 <- cmd_args[3] # 20 # top number of genes to display (e.g. 20)

args4 <- cmd_args[4] #yes #no #do you want to select genes?
# yes or no

#this one is optional
args5 <- cmd_args[5]

################################### MAIN #######################################

if(args4 == "yes"){
  #####################################################################
  user.gene.request <- args5
  user.gene.list <- unlist(strsplit(user.gene.request,"-"))

  #############################  MAIN  ###########################################
  #===============================================================================
  #    Preparation of environment
  #===============================================================================
  # Identify and install missing libraries.
  TCGA.libs <- c("TCGAbiolinks","SummarizedExperiment");
  new.libs <- TCGA.libs[!(TCGA.libs %in% installed.packages() [,"Package"])]
  if(length(new.libs)) {
    source("https://bioconductor.org/biocLite.R")
    biocLite(new.libs)
  }

  # Load in the libraries to R.
  library("TCGAbiolinks")
  library("SummarizedExperiment")

  # Define variables.
  ProjectDir <- "app/static/results";
  # The dataset name as defined by TCGAbiolinks.
  ProjectName <-  "mutations";

  # Create and enter "mutations" directory.
  if (file.exists(ProjectDir)){
    cat( paste("\nFolder with project [", ProjectName, "] already exists. The 
               requested data will be stored in [", ProjectDir, "]\n", sep=" ") );
  } else {
    dir.create(ProjectDir);
  }
  setwd(ProjectDir);

  #===============================================================================
  #    Data query and download clincal data
  #    Note: tumor can be softcoded as param input from command line.
  #    Note: can develop program and let user pick clin.data terms.
  #===============================================================================
  # Define tumor type according to TCGA format e.g. BRCA (breast), PAAD (Pancreas)
  tumor.type <-  "LUSC"
  ProjectID <- "TCGA-LUSC"

  # Biolinks command to download the general clinical data for all tumor samples
  clin.data <- GDCquery_clinic( ProjectID, "clinical" );
  # Check dimensions
  dim(clin.data)

  # Subsetting the clinical data to covariates of interest to new data matrix
  clin.covariates.for.oncodata <- c("race", "gender", "vital_status", 
                                            "tumor_stage", "bcr_patient_barcode");
  clin.forvisual <- clin.data[ , clin.covariates.for.oncodata]

  # Check dimensions of slimmed data matrix
  dim(clin.forvisual) #1097 5

 #===============================================================================
  #    Access and download the mutation data for tumor type and
  #    generate an oncoprint for each pipeline
  #    Note: As mentioned before, should be softcoded to let user decide cancer
  #    type as well as pick pipeline option (passed in as parameter).
  #    Note: Please see README.txt for more information on each pipeline.
  #===============================================================================

  # Download mutations data and generate oncoprint of top genes for chosen pipe
  # this entire process for each subtype of breast cancer

  # Downloading mutation data
  mut.data <- GDCquery_Maf(tumor = tumor.type, pipelines = args2, save.csv = TRUE);

# split the downloaded mut data according to each smoking subtype
mut.data.barcodes <- NULL

    for( i in 1:length(mut.data$Tumor_Sample_Barcode) ){
    tmp.bar.split <- unlist(strsplit(mut.data$Tumor_Sample_Barcode[i], 
                                     split="-", fixed=TRUE));
    tmp.bar.join <- paste(tmp.bar.split[1], "-", tmp.bar.split[2], "-", 
                          tmp.bar.split[3], sep = "")
    cat("\n", tmp.bar.split, "\t", tmp.bar.join); # to see it's producing barcode
    mut.data.barcodes <- rbind(mut.data.barcodes, tmp.bar.join)
  }

# now subset mutations data for each smoker status group

reformed.morethan15.smokers.mut.data <- mut.data[which(mut.data.barcodes %in% reformed.morethan15.smokers),]
reformed.lessthan15.smokers.mut.data <- mut.data[which(mut.data.barcodes %in% reformed.lessthan15.smokers),]
never.smokers.mut.data <- mut.data[which(mut.data.barcodes %in% never.smokers),]
smokers.mut.data <- mut.data[which(mut.data.barcodes %in% smokers),]

  subtype.data <- list(Reformedmorethan15=reformed.morethan15.smokers.mut.data, reformedlessthan15=reformed.lessthan15.smokers.mut.data, 
             neversmoked=never.smokers.mut.data, smokers=smokers.mut.data)

  # Assign titles to use in filename
  comment(subtype.data$Reformedmorethan15) <- "Reformedmorethan15"
  comment(subtype.data$reformedlessthan15) <- "reformedlessthan15"
  comment(subtype.data$neversmoked) <- "neversmoked"
  comment(subtype.data$smokers) <- "smokers"

for(subtype in subtype.data){
    all.mut <- matrix(data=0, nrow=length(user.gene.list), ncol=1, 
            dimnames=list(rownames=user.gene.list, colnames="number_of_reports"));
    # Identify position of each gene and populate the matrix
    all.positions <- NULL;
    for(gene in user.gene.list) {
      gene.position <- which(subtype$Hugo_Symbol %in% user.gene.list);
      all.mut[gene, "number_of_reports"] <- length(gene.position);
      all.positions <- c(all.positions, gene.position );
    }
  # Order the whole all.mut matrix by the most reported gene highest to lowest.
    all.mut.ordered <- all.mut[ order(all.mut[, "number_of_reports"], 
                                      decreasing=TRUE),];
    # Isolate top 20 gene names.
    top.mut.genes <- names( all.mut.ordered[ 1:args3 ] );
    # Subset mutation data
    top.mut.data <- subtype[ all.positions, ];
  # Oncoprint of top 20 genes.
    TCGAvisualize_oncoprint(
        mut = top.mut.data,
        genes = top.mut.genes,
        filename = paste("oncoprint_", comment(subtype), 
                        ".pdf", sep=""),
        annotation = clin.forvisual,
        color=c("background"="#CCCCCC","DEL"="purple",
                "INS"="yellow","SNP"="brown"),
        rows.font.size= 8,
        width = 5,
        heatmap.legend.side = "right",
        dist.col = 0,
        label.font.size = 6
      );
  }
} else {
  #####################################################################

  #############################  MAIN  ###########################################
  #===============================================================================
  #    Preparation of environment
  #===============================================================================
  # Identify and install missing libraries.
  TCGA.libs <- c("TCGAbiolinks","SummarizedExperiment");
  new.libs <- TCGA.libs[!(TCGA.libs %in% installed.packages() [,"Package"])]
  if(length(new.libs)) {
    source("https://bioconductor.org/biocLite.R")
    biocLite(new.libs)
  }

  # Load in the libraries to R.
  library("TCGAbiolinks")
  library("SummarizedExperiment")

  # Define variables.
  ProjectDir <- "app/static/results";
  # The dataset name as defined by TCGAbiolinks.
  ProjectName <-  "mutations";

  # Create and enter "mutations" directory.
  if (file.exists(ProjectDir)){
    cat( paste("\nFolder with project [", ProjectName, "] already exists. The 
               requested data will be stored in [", ProjectDir, "]\n", sep=" ") );
  } else {
    dir.create(ProjectDir);
  }
  setwd(ProjectDir);

  #===============================================================================
  #    Data query and download clincal data
  #    Note: tumor can be softcoded as param input from command line.
  #    Note: can develop program and let user pick clin.data terms.
  #===============================================================================
  # Define tumor type according to TCGA format e.g. BRCA (breast), PAAD (Pancreas)
  tumor.type <-  "LUSC"
  ProjectID <- "TCGA-LUSC"

  # Biolinks command to download the general clinical data for all tumor samples
  clin.data <- GDCquery_clinic( ProjectID, "clinical" );
  # Check dimensions
  dim(clin.data)

  # Subsetting the clinical data to covariates of interest to new data matrix
  clin.covariates.for.oncodata <- c("race", "gender", "vital_status", 
                                            "tumor_stage", "bcr_patient_barcode");
  clin.forvisual <- clin.data[ , clin.covariates.for.oncodata]

  # Check dimensions of slimmed data matrix
  dim(clin.forvisual) #1097 5

 #===============================================================================
  #    Access and download the mutation data for tumor type and
  #    generate an oncoprint for each pipeline
  #    Note: As mentioned before, should be softcoded to let user decide cancer
  #    type as well as pick pipeline option (passed in as parameter).
  #    Note: Please see README.txt for more information on each pipeline.
  #===============================================================================

  # Download mutations data and generate oncoprint of top genes for chosen pipe
  # this entire process for each subtype of breast cancer

  # Downloading mutation data
  mut.data <- GDCquery_Maf(tumor = tumor.type, pipelines = args2, save.csv = TRUE);

# split the downloaded mut data according to each smoking subtype
mut.data.barcodes <- NULL

    for( i in 1:length(mut.data$Tumor_Sample_Barcode) ){
    tmp.bar.split <- unlist(strsplit(mut.data$Tumor_Sample_Barcode[i], 
                                     split="-", fixed=TRUE));
    tmp.bar.join <- paste(tmp.bar.split[1], "-", tmp.bar.split[2], "-", 
                          tmp.bar.split[3], sep = "")
    cat("\n", tmp.bar.split, "\t", tmp.bar.join); # to see it's producing barcode
    mut.data.barcodes <- rbind(mut.data.barcodes, tmp.bar.join)
  }

# now subset mutations data for each smoker status group

reformed.morethan15.smokers.mut.data <- mut.data[which(mut.data.barcodes %in% reformed.morethan15.smokers),]
reformed.lessthan15.smokers.mut.data <- mut.data[which(mut.data.barcodes %in% reformed.lessthan15.smokers),]
never.smokers.mut.data <- mut.data[which(mut.data.barcodes %in% never.smokers),]
smokers.mut.data <- mut.data[which(mut.data.barcodes %in% smokers),]

  subtype.data <- list(Reformedmorethan15=reformed.morethan15.smokers.mut.data, reformedlessthan15=reformed.lessthan15.smokers.mut.data, 
             neversmoked=never.smokers.mut.data, smokers=smokers.mut.data)

  # Assign titles to use in filename
  comment(subtype.data$Reformedmorethan15) <- "Reformedmorethan15"
  comment(subtype.data$reformedlessthan15) <- "reformedlessthan15"
  comment(subtype.data$neversmoked) <- "neversmoked"
  comment(subtype.data$smokers) <- "smokers"



  for(subtype in subtype.data){
    genes.names <- unique(subtype$Hugo_Symbol);
    all.mut <- matrix(data=0, nrow=length(genes.names), ncol=1, 
            dimnames=list(rownames=genes.names, colnames="number_of_reports"));
    # Identify position of each gene and populate the matrix
    all.positions <- NULL;
    for(gene in genes.names) {
      gene.position <- which(subtype$Hugo_Symbol == gene);
      all.mut[gene, "number_of_reports"] <- length(gene.position);
      all.positions <- c(all.positions, gene.position );
    }
  # Order the whole all.mut matrix by the most reported gene highest to lowest.
    all.mut.ordered <- all.mut[ order(all.mut[, "number_of_reports"], 
                                      decreasing=TRUE),];
    # Isolate top 20 gene names.
    top.mut.genes <- names( all.mut.ordered[ 1:args3 ] );
    # Subset mutation data
    top.mut.data <- subtype[ all.positions, ];
  # Oncoprint of top 20 genes.
    TCGAvisualize_oncoprint(
        mut = top.mut.data,
        genes = top.mut.genes,
        filename = paste("oncoprint_", comment(subtype), 
                         ".pdf", sep=""),
        annotation = clin.forvisual,
        color=c("background"="#CCCCCC","DEL"="purple",
                "INS"="yellow","SNP"="brown"),
        rows.font.size= 8,
        width = 5,
        heatmap.legend.side = "right",
        dist.col = 0,
        label.font.size = 6
      );
  }
}
}

dev.off()
}
